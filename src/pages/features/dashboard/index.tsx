import { type NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
// import { useGetProductById } from "~/pages/hooks/useGetProductById";
import { api } from "~/utils/api";
import EditProductModal from "../../../components/dashboard/editProductModal";

import DashboardSidebar from "../../../components/dashboard/SidebarDashboard";
import AddProduct from "../add-product";
import DashboardTable from "../../../components/dashboard/dashboardTable";
import Toast from "../../../components/dashboard/Toast";
import { useDeleteProduct } from "~/hooks/useDeleteProduct";

const Dasboard: NextPage = () => {
  const { data: products, refetch } = api.product.getAllProductById.useQuery();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState(products);
  const deleteProduct = useDeleteProduct();
  const [selectedProductId, setSelectedProductId] = useState<string | null>(
    null
  );

  const handleEditProduct = (products: any) => {
    setSelectedProduct(products);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
  };

  const handleConfirmDelete = async () => {
    // console.log(id);
    try {
      await deleteProduct(selectedProductId);
      setIsToastOpen(false);
      refetch();
    } catch (error) {
      console.log(error);
    }
  };

  const handleOpenToast = (id: any) => {
    setSelectedProductId(id);
    setIsToastOpen(true);
  };

  const [isToastOpen, setIsToastOpen] = useState(false);

  const [isTableOpen, setIsTableOpen] = useState(false);

  return (
    <>
      <Head>
        <title>view product</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" container mx-auto font-helvetica">
        <div className="mb-2 mt-10 flex">
          {/* Sidebar */}
          <DashboardSidebar setIsTableOpen={setIsTableOpen} />

          {isTableOpen && (
            <DashboardTable
              products={products}
              onEdit={handleEditProduct}
              onDelete={handleOpenToast}
              isToastOpen={isToastOpen}
            />
          )}

          {!isTableOpen && <AddProduct />}

          {isToastOpen && (
            <Toast
              onConfirmDelete={handleConfirmDelete}
              onCancel={() => setIsToastOpen(false)}
              setIsToastOpen={setIsToastOpen}
            />
          )}

          {/* Edit Product Modal */}
          {isModalOpen && (
            <EditProductModal
              onClose={handleCloseModal}
              product={selectedProduct}
              refetch={refetch}
            />
          )}
        </div>
      </main>
    </>
  );
};

export default Dasboard;

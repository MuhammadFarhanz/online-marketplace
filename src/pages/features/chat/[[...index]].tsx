import { useFormik } from "formik";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { memo, useEffect, useRef, useState } from "react";
import { useGetProductById } from "~/pages/hooks/useGetProductById";
import { api } from "~/utils/api";
import { useSession } from "next-auth/react";
import useGetMessages from "~/pages/hooks/useGetMessage";
import useFindConversation from "~/pages/hooks/useFindConversation";
import MessageList from "~/pages/components/messageList";
import ConversationCard from "~/pages/components/conversationCard";
import MessageForm from "~/pages/components/messageForm";

const Chat: NextPage = () => {
  const {data: conversations} = api.message.conversations.useQuery()
  const utils = api.useContext();
  api.message.onSendMessage.useSubscription(undefined, {
    onData: ({ conversationId }) => {
      utils.message.conversations.invalidate();
      utils.message.messages.invalidate({ conversationId });
      // if (!showConversations && currentConversationId !== conversationId) {
      //   setShowNotificationBadge(true);
      // }
    },
  });

  const router = useRouter();
 
  const [selectedConversationId, setSelectedConversationId] = useState<string | null>(null);
  const messages = useGetMessages(selectedConversationId);
  // const { id: sender } = useSession().data?.user || {};
  const { recipient } = router.query;
  const findconversation = useFindConversation(recipient)
  const recipientId = recipient ?? '';

  useEffect(() => {
    if (findconversation) {
      setSelectedConversationId(findconversation);
    }else{
      
    }
  }, [findconversation]);

  return (
    <>
      <Head>
        <title>chat</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
    <div className="bg-[#F8F8F8]">
    <main className="  font-helvetica mx-auto flex h-full flex-col container bg-gray-600">
        <h1 className="text-4xl text-black m-4 ml-0">chat</h1>
      <div className="flex  h-[80vh] ">
        <div className="border-black border-2 border-r-0 w-1/3 flex flex-col">
          {conversations ? conversations?.map((conversationData: any) => (
              <ConversationCard
                  key={conversationData.id}
                  data={conversationData}
                  setSelectedConversationId={setSelectedConversationId}
                />
              )) : null}
        </div>


        <div className="border-black border-2 w-full relative h-full ">
         {!messages && <div> select user to start a chat</div>}

         <div className="  mb-30 h-[90%] overflow-y-auto ">
          {messages && (<MessageList messages={messages} />)}
        </div>
            

           {messages || recipient ? (
                 
          <div className="">
          <MessageForm
        //  onSubmit={handleSendMessage} 
         conversationId={selectedConversationId} recipient={recipient}  />
        </div>

           ): null} 

        </div>
       
      </div>
      </main>
    </div>
    </>
  );
};

export default memo(Chat);

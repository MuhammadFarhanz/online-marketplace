import { useFormik } from "formik";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { useGetProductById } from "~/pages/hooks/useGetProductById";
import { api } from "~/utils/api";
import ConversationCard from "./conversation";


const Chat: NextPage = () => {
  // const createMessage = api.message.sendMessage.useMutation()
  const createMessageToUser = api.message.sendMessageToUser.useMutation()
  const  conversationsData = api.message.conversations.useQuery()
  const { data, error } = useGetProductById();
  const router = useRouter();
  const { recipient } = router.query;
  const conversations = conversationsData?.data || [];
 
  interface Message {
    message: string,
  }
  const [messages, setMessages] = useState<string[]>([]);

  const formik = useFormik<Message>({
    initialValues: {
      message: '',
    },
    onSubmit: async (values: Message,{ resetForm }) => {

      if (recipient) {

       const response: string = await createMessageToUser.mutateAsync({
          message: values.message,
          authorId: recipient as string,
        });

        setMessages((prevMessages) => [...prevMessages, response]);

      } else {
        // await createMessage.mutateAsync({
        //   message: values.message,
        //   productId: '',
        //   toUser: '',
        // });
        console.log('id does not exist');
      }
      resetForm()
    },
  });
  

  const [selectedConversationMessages, setSelectedConversationMessages] = useState<any[]>([]);
  const [selectedConversationId, setSelectedConversationId] = useState<string | null>(null)

  const handleConversationClick = (data: any) => {
    setSelectedConversationId(data.conversation.id);
  };

  const handleConversationDataFetched = (data: any) => {
    setSelectedConversationMessages(data?.messages || []);
  };


  return (
    <>
      <Head>
        <title>chat</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
    <div className="bg-[#F8F8F8]">
    <main className="  font-helvetica mx-auto flex min-h-screen flex-col container">
        <h1 className="text-4xl text-black m-4 ml-0">chat</h1>
      <div className="flex  h-[80vh] ">
        <div className="border-black border-2 border-r-0 w-1/3 flex flex-col">
         {conversations?.map((conversationData: any) => (
            <ConversationCard
              key={conversationData.id}
              data={conversationData}
              onClick={handleConversationClick}
              selectedConversationId={selectedConversationId}
              onConversationDataFetched={handleConversationDataFetched} 
            />
          ))}
        </div>

        <div className="border-black border-2 w-full relative">
          select user to start a chat
        <div>Chat Page - Chat with Author ID: {recipient}</div>;
    
          {selectedConversationMessages.map((message: any) => (
          <div key={message.id}>{message.message}</div>
          ))}
            <form onSubmit={formik.handleSubmit}
          className=" border-black border-t-2 shadow-md rounded px-8 pt-6 pb-6 absolute bottom-0 w-full">
            <div className="flex">
              <input
                className="shadow appearance-none border rounded-full w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                id="message"
                name="message"
                placeholder="Enter name"
                value={formik.values.message}
                onChange={formik.handleChange}
              />
        
              <button
                className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-2 ml-2 rounded-full focus:outline-none focus:shadow-outline"
                type="submit"
              >
               <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5" />
              </svg>

              </button>
            </div>
          </form>
        </div>
      </div>
      </main>
    </div>
    </>
  );
};

export default Chat;

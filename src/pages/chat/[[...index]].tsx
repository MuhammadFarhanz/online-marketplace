import { type NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { memo, useEffect, useRef, useState } from "react";
import { api } from "~/utils/api";
import SettingsIcon from "~/components/svgcomponent/settingsIcon";
import { useGetMessages } from "~/hooks/useGetMessage";
import { useFindConversation } from "~/hooks/useFindConversation";
import MessageList from "~/components/chat/messageList";
import ConversationList from "~/components/chat/ConversationList";
import MessageForm from "~/components/chat/messageForm";
import { NEW_MESSAGE } from "~/constants/newMessage";
import SearchIcon from "~/components/svgcomponent/searchIcon";

const Chat: NextPage = () => {
  const { data: conversations } = api.message.conversations.useQuery();
  // const utils = api.useContext();

  // api.message.onSendMessage.useSubscription(undefined, {
  //   onData: ({ conversationId }) => {
  //     utils.message.conversations.invalidate();
  //     utils.message.messages.invalidate({ conversationId });
  //     // if (!showConversations && currentConversationId !== conversationId) {
  //     //   setShowNotificationBadge(true);
  //     // }
  //   },
  // });

  interface Recipient {
    name: string;
    image: string;
  }

  const router = useRouter();

  const [currentConversationId, setCurrentConversationId] = useState<
    string | null
  >(null);
  const { messages, isLoading } = useGetMessages(currentConversationId);
  const [currentRecipient, setCurrentRecipient] = useState<Recipient | null>(
    null
  );
  const { recipient } = router.query;
  const findconversation = useFindConversation(recipient);
  const recipientId = typeof recipient === "string" ? recipient : "";
  const { data: userData } = api.user.getUser.useQuery(
    { userId: recipientId },
    { enabled: !!recipientId }
  );

  useEffect(() => {
    if (findconversation) {
      setCurrentConversationId(findconversation);
    } else {
      setCurrentRecipient({
        name: userData?.name as string,
        image: userData?.image as string,
      });
      setCurrentConversationId(NEW_MESSAGE);
    }
  }, [findconversation]);

  return (
    <>
      <Head>
        <title>chat</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="bg-[#F8F8F8] ">
        <main className="container mx-auto flex  h-full flex-col font-helvetica">
          <h1 className="text-blac mb-4 ml-0  mt-4 text-4xl font-bold">CHAT</h1>
          <div className="flex h-[80vh] w-full justify-between ">
            <div className="mr-4 flex w-[25%] flex-col ">
              <div className="relative flex w-full items-center justify-between ">
                <div className="relative flex w-5/6 items-center bg-black">
                  <div className="w-full -translate-x-[2px] -translate-y-[2px] bg-white">
                    <input
                      type="text"
                      placeholder="Search"
                      className="h-12 w-full border-2 border-black py-4 pl-2 pr-10 placeholder:text-black focus:outline-none"
                    />
                    <SearchIcon />
                  </div>
                </div>
                <div className="ml-2 flex h-full w-1/6 bg-black">
                  <div className="flex h-full w-full -translate-x-[2px] -translate-y-[2px] items-center justify-center border-2 border-black bg-white">
                    <SettingsIcon />
                  </div>
                </div>
              </div>

              <ConversationList
                conversations={conversations}
                setSelectedConversationId={setCurrentConversationId}
                setCurrentRecipient={setCurrentRecipient}
              />
            </div>
            <div className="h-full w-[75%] bg-black">
              <div className="relative h-full -translate-x-1 -translate-y-1 border-2 border-black  bg-white">
                {currentRecipient?.name === undefined ? (
                  <div className="flex h-full items-center justify-center font-bold">
                    select user to start a chat
                  </div>
                ) : null}

                {currentRecipient?.name !== undefined ? (
                  <div className="h-[10%] border-b-2 border-black pl-4 pr-4">
                    <div className="flex justify-between  p-4 text-black">
                      <div className="flex flex-row">
                        <img
                          src={currentRecipient?.image}
                          className="h-12 w-12 rounded-full border border-black"
                        />
                        <div className="relative flex flex-col">
                          <p className="ml-2">{currentRecipient?.name || ""}</p>
                          <div className=" ml-4">
                            <p className="ml-2 text-sm">active</p>

                            <div className="absolute left-[8px] top-8 h-2 w-2 rounded-full bg-green-500"></div>
                          </div>
                        </div>
                      </div>

                      <div className="relative flex items-center bg-black">
                        <input
                          type="text"
                          placeholder="Search"
                          className=" -translate-x-[2px] -translate-y-[2px] border-2 border-black px-4 py-2 pr-20 placeholder:text-black focus:outline-none"
                        />
                        <SearchIcon />
                      </div>
                    </div>
                  </div>
                ) : null}

                <div className="  mb-30 h-[80%] overflow-y-auto ">
                  {messages && (
                    <MessageList
                      messages={messages}
                      conversationId={currentConversationId}
                      isLoading={isLoading}
                    />
                  )}
                </div>

                {messages || recipient ? (
                  <div className="flex justify-center ">
                    <MessageForm
                      currentConversationId={currentConversationId}
                      recipient={recipient}
                      setSelectedConversationId={setCurrentConversationId}
                    />
                  </div>
                ) : null}
              </div>
            </div>
          </div>
        </main>
      </div>
    </>
  );
};

export default Chat;
